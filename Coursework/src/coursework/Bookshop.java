package coursework;

import javax.swing.JFrame;

import java.util.regex.Pattern;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.text.NumberFormat;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.awt.event.ActionEvent;
import java.awt.Font;
import java.awt.Rectangle;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import javax.swing.text.NumberFormatter;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JSpinner;
import javax.swing.border.TitledBorder;
import javax.swing.JSlider;
import javax.swing.border.LineBorder;
import java.awt.Color;
import java.awt.Component;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.JTextArea;

/**
 * Adds the ability to add a list of items to a JComboBox that is already initialized
 * 
 * @author Lewis
 */
class newComboBox extends JComboBox<Object>{
	// Autogenerated serialID
	private static final long serialVersionUID = 4135714812910695103L;
	// Constructor
	public newComboBox(Object items[]) {
		super(items);
	}
	
	// Methods
	/**
	 * Adds the specified list of items to the JComboBox
	 * 
	 * @param items to add to the JComboBox
	 */
	public void addList(Object items[]) {
		for(Object item : items) {
			this.addItem(item);
		}
	}
}

/**
 * Adds the getBookAt function to the JTable class
 * 
 * @author Lewis
 */
class BooksTable extends JTable{
	// Autogenerated serialID
	private static final long serialVersionUID = 767102705546344521L;
	// Constructor
	public BooksTable(TableModel tableModel) {
		super(tableModel);
	}
	
	// Methods
	/**
	 * Returns the book at the specified index (row) of the JTable
	 * 
	 * @param index of the JTable
	 * @return book created using the values in the row of the table
	 */
	public Book getBookAt(int index) {
		// Get book values from row
		int ISBN = Integer.parseInt(this.getValueAt(index, 0).toString());
		BookType type = BookType.getType(this.getValueAt(index, 1).toString());
		String title = this.getValueAt(index, 2).toString();
		String language = this.getValueAt(index, 3).toString();
		String genre = this.getValueAt(index, 4).toString();
		LocalDate releaseDate = LocalDate.parse(this.getValueAt(index, 5).toString(), Book.dateFormat);
		double price = Double.parseDouble(this.getValueAt(index, 6).toString().substring(1, this.getValueAt(index, 6).toString().length()));
		int quantity = Integer.parseInt(this.getValueAt(index, 7).toString());
		// Create book object depending on book type
		Book newBook = null;
		if(type == BookType.PAPERBACK) {
			int numOfPages = Integer.parseInt(this.getValueAt(index, 8).toString());
			String condition = this.getValueAt(index, 9).toString();
			
			newBook = new Paperback(ISBN, title, language, genre, releaseDate, price, quantity, numOfPages, condition);
		} 
		else if(type == BookType.EBOOK) {
			int numOfPages = Integer.parseInt(this.getValueAt(index, 8).toString());
			String format = this.getValueAt(index, 9).toString();
			
			newBook = new Ebook(ISBN, title, language, genre, releaseDate, price, quantity, numOfPages, format);
		}
		else if(type == BookType.AUDIOBOOK) {
			double length = Double.parseDouble(this.getValueAt(index, 8).toString());
			String format = this.getValueAt(index, 9).toString();
			
			newBook = new Audiobook(ISBN, title, language, genre, releaseDate, price, quantity, length, format);
		}
		return (Book)newBook;
	}
	
	/**
	 * Returns the index of the row with the specified ISBN number if it exists in the table
	 * 
	 * @param ISBN of book to search for
	 * @return the index of the row containing the ISBN
	 */
	public int indexOf(int ISBN) {
		for(int i = 0; i < getRowCount(); i++) {
			if(Integer.parseInt(getValueAt(i, 0).toString()) == ISBN) return i;
		}
		return -1;
	}
}

class BasketTable extends JTable{
	// Auto generated Serial ID
	private static final long serialVersionUID = -5596223958640668510L;
	
	// Constructor
	public BasketTable(TableModel tableModel) {
		super(tableModel);
	}

	/**
	 * Returns the index of the row with the specified ISBN number if it exists in the table
	 * 
	 * @param ISBN of book to search for
	 * @return the index of the row containing the ISBN
	 */
	public int indexOf(int ISBN) {
		for(int i = 0; i < getRowCount(); i++) {
			if(Integer.parseInt(getValueAt(i, 0).toString()) == ISBN) return i;
		}
		return -1;
	}
}

public class Bookshop extends JFrame {
	// Auto generated Serial ID
	private static final long serialVersionUID = -8135602917372935816L;
	// Attributes
	private JPanel contentPane;
	private JTextField textTitle;
	private JTextField textSearch;
	private JTextField textEmail;
	private JTextArea textAreaOutput;

	/**
	 * Outputs the given update to the textAreaOutput following the current time
	 * 
	 * @param update to add to the textAreaOutput
	 */
	public void updateLog(String update) {
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");  
		LocalDateTime now = LocalDateTime.now();  
		textAreaOutput.append("\n" + dtf.format(now) + ": " + update);  
	}
	
	/**
	 * Clears the table displaying the customers basket and refills it with the new values
	 * 
	 * @param basketTable to update
	 * @param customer with shopping basket attribute
	 */
	public void updateBasketTable(BasketTable basketTable, Customer customer) {
		// Empty basket table
		((DefaultTableModel) basketTable.getModel()).setRowCount(0);
		ArrayList<String[]> tableRows = new ArrayList<String[]>();
		// Get books from basket
		for(Book book : customer.getBasket()) {
			boolean containsBook = false;
			for(String[] row : tableRows) {
				// If book is already in tableRows, increase quantity
				if(Integer.parseInt(row[0]) == book.getISBN()) {
					containsBook = true;
					row[3] = Integer.toString(Integer.parseInt(row[3])+1);
					break;
				}
			}
			// If book is not already in tableRows, add it
			if(!containsBook) tableRows.add(new String[] {Integer.toString(book.getISBN()), book.getTitle(), String.format("£%.2f", book.getPrice()), "1"});
		}
		// Add books to basket table
		for(String[] row : tableRows) {
			((DefaultTableModel) basketTable.getModel()).insertRow(0, row);
		}
	}
	
	/**
	 * Clears all input fields in the specified panel
	 * 
	 * @param panel to clear fields from
	 */
	@SuppressWarnings("unchecked")
	public void clearForm(JPanel panel) {
		for(Component c : panel.getComponents()) {
			if(c instanceof JFormattedTextField) {
				if(((JFormattedTextField) c).getValue() == null) continue;
				((JFormattedTextField) c).setValue(null);
			}
			else if (c instanceof JTextField) {
				if(((JTextField) c).getText() == null) continue;
				((JTextField) c).setText(null);
			}
			else if (c instanceof JComboBox) {
				if(((JComboBox<Object>) c).getSelectedIndex() == 0) continue;
				((JComboBox<Object>) c).setSelectedIndex(0);
			}
			else if (c instanceof JSpinner) {
				if(Integer.parseInt(((JSpinner) c).getValue().toString()) == 0) continue;
				((JSpinner) c).setValue(0);
			}
		}
	}
	
	/**
	 * Reset border colours on input fields to their default values
	 * 
	 * @param panel to reset borders on
	 */
	public void resetFormBorders(JPanel panel) {
		for(Component c : panel.getComponents()) {
			if(c instanceof JFormattedTextField || c instanceof JTextField || c instanceof JComboBox || c instanceof JSpinner) {
				((JComponent) c).setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.lightGray));
			}
		}
	}
	
	/**
	 * Create the frame.
	 */
	public Bookshop(User user) {
		// Change some default fonts
		UIManager.put("Label.font", new Font("Arial", Font.PLAIN, 10));
		UIManager.put("TextField.font", new Font("Arial", Font.PLAIN, 10));
		UIManager.put("ComboBox.font", new Font("Arial", Font.PLAIN, 10));
		UIManager.put("Spinner.font", new Font("Arial", Font.PLAIN, 10));
		UIManager.put("FormattedTextField.font", new Font("Arial", Font.PLAIN, 10));
		UIManager.put("TextArea.font", new Font("Arial", Font.PLAIN, 10));
		UIManager.put("Button.font", new Font("Arial", Font.PLAIN, 13));
		
		UIManager.put("Table.font", new Font("Arial", Font.PLAIN, 8));
		UIManager.put("TableHeader.font", new Font("Arial", Font.BOLD, 10));
		UIManager.put("TabbedPane.font", new Font("Arial", Font.PLAIN, 10));
		UIManager.put("Panel.font", new Font("Arial", Font.PLAIN, 10));
		UIManager.put("TitledBorder.font", new Font("Arial", Font.PLAIN, 10));
		
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 755, 589);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JButton btnLogOut = new JButton("Log out");
		btnLogOut.addActionListener(new ActionListener() {
			/**
			 * Takes the user back to the login screen
			 */
			public void actionPerformed(ActionEvent e) {
				MainFrame login = new MainFrame();
				login.setVisible(true);
				setVisible(false);
			}
		});
		btnLogOut.setBounds(644, 5, 85, 21);
		contentPane.add(btnLogOut);
		btnLogOut.setFont(new Font("Arial", Font.PLAIN, 10));
		
		JLabel lblUser = new JLabel("Logged in as: " + user.getUsername());
		lblUser.setHorizontalAlignment(JLabel.RIGHT);
		lblUser.setInheritsPopupMenu(false);
		lblUser.setBounds(482, 1, 150, 26);
		contentPane.add(lblUser);
		
		JLabel lblOutput = new JLabel("Output:");
		lblOutput.setBounds(20, 462, 45, 13);
		contentPane.add(lblOutput);
		
		JScrollPane scrollPaneOutput = new JScrollPane();
		scrollPaneOutput.setBounds(20, 485, 696, 60);
		contentPane.add(scrollPaneOutput);
		
		textAreaOutput = new JTextArea();
		textAreaOutput.setEditable(false);
		scrollPaneOutput.setViewportView(textAreaOutput);
		
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		tabbedPane.setBounds(10, 10, 721, 442);
		contentPane.add(tabbedPane);
		
		JPanel panelViewBooks = new JPanel();
		tabbedPane.addTab("View Books", null, panelViewBooks, null);
		
		// ============ VIEW BOOKS PANEL ============
		panelViewBooks.setLayout(null);
		// Define column names
		String [] colNames = {"ISBN", "Type", "Title", "Language", "Genre", "Release", "Price", "Quantity", "Info 1", "Info 2"};
		// Books table
		DefaultTableModel tableModel = new DefaultTableModel(colNames, 0);
		
		// Book genres that can be chosen
		String [] genres = {"Politics", "Medicine", "Business", "Computer Science", "Biography"};
		String [] advGenres = {"Any", "Politics", "Medicine", "Business", "Computer Science", "Biography"};
		// Book types that can be added
		String [] bookTypes = {"Paperback", "Ebook", "Audiobook"};
		String [] advBookTypes = {"Any", "Paperback", "Ebook", "Audiobook"};
		
		JScrollPane scrollPaneBooksTable = new JScrollPane();
		scrollPaneBooksTable.setFocusTraversalPolicyProvider(true);
		scrollPaneBooksTable.setBounds(10, 53, 696, 351);
		panelViewBooks.add(scrollPaneBooksTable);
		BooksTable tableBooks = new BooksTable(tableModel);
		// Disables user cell editing
		tableBooks.setDefaultEditor(Object.class, null);
		tableBooks.getTableHeader().setReorderingAllowed(false);
		
		scrollPaneBooksTable.setViewportView(tableBooks);
		tableBooks.setFocusable(false);
		// Set columns widths
		TableColumnModel tableColumnModel = tableBooks.getColumnModel();
		tableColumnModel.getColumn(0).setMinWidth(60); // ISBN
		tableColumnModel.getColumn(1).setMinWidth(60); // Type
		tableColumnModel.getColumn(2).setMinWidth(125); // Title
		tableColumnModel.getColumn(3).setMinWidth(60); // Language
		tableColumnModel.getColumn(4).setMinWidth(100); // Genre
		tableColumnModel.getColumn(5).setMinWidth(60); // Release
		tableColumnModel.getColumn(6).setMinWidth(50); // Price
		tableColumnModel.getColumn(7).setMinWidth(50); // Quantity
		tableColumnModel.getColumn(8).setMinWidth(50); // Info 1
		tableColumnModel.getColumn(9).setMinWidth(50); // Info 2
		
		tableBooks.setRowHeight(20);
		
		// View books button
		JButton btnViewBooks = new JButton("View Books");
		btnViewBooks.addActionListener(new ActionListener() {
			/**
			 * Gets all the book from the stock file and adds them to the output table
			 */
			public void actionPerformed(ActionEvent event) {
				// Update table
				tableModel.setRowCount(0);
				ArrayList<Book> stock = User.viewBooks();
				// Check if stock exists
				for(Book book : stock) {
					tableModel.insertRow(0, book.toString().split(", "));
				}
				// If no books are found in stock, output relevant error message
				if(stock.size() < 1){
					updateLog("Error: No books could be found in stock, please check the stock file exists and is non-empty.");
				}
			}
		});
		btnViewBooks.setBounds(10, 13, 113, 29);
		panelViewBooks.add(btnViewBooks);
		
		// Only show if user is customer
		if (user instanceof Customer) {
			Customer customer = (Customer) user;
			
			JPanel panelBasket = new JPanel();
			tabbedPane.addTab("Basket", null, panelBasket, null);
			panelBasket.setLayout(null);
			
			JPanel panelSummary = new JPanel();
			panelSummary.setBorder(new TitledBorder(null, "Summary", TitledBorder.LEADING, TitledBorder.TOP, null, null));
			panelSummary.setBounds(423, 11, 268, 231);
			panelBasket.add(panelSummary);
			panelSummary.setLayout(null);
			
			JLabel lblTotalBooks = new JLabel("Books in basket: 0");
			lblTotalBooks.setBounds(10, 30, 248, 14);
			panelSummary.add(lblTotalBooks);
			
			JLabel lblTotalPrice = new JLabel("Total price: \u00A30.00");
			lblTotalPrice.setBounds(10, 52, 248, 14);
			panelSummary.add(lblTotalPrice);
		
			String [] basketTableColumns = {"ISBN", "Title", "Price", "Quantity"};
			// Books table
			DefaultTableModel tableBasketModel = new DefaultTableModel(basketTableColumns, 0);
			BasketTable tableBasket = new BasketTable(tableBasketModel);
			
			textSearch = new JTextField();
			textSearch.setBounds(133, 15, 319, 27);
			panelViewBooks.add(textSearch);
			textSearch.setColumns(10);
			
			JButton btnSearch = new JButton("Search");
			btnSearch.addActionListener(new ActionListener() {
				/**
				 * Gets all the books that meet the search criteria and displays them in the output table
				 */
				public void actionPerformed(ActionEvent e) {
					// Search for books
					String searchTerm = textSearch.getText();
					ArrayList<Book> searchResults = customer.search(searchTerm);
					// Update table
					tableModel.setRowCount(0);
					for(Book book : searchResults) {
						tableModel.insertRow(0, book.toString().split(", "));
					}
					if(searchResults.size() < 1){
						updateLog("Error: No books could be found matching this criteria.");
					}
				}
			});
			btnSearch.setBounds(462, 13, 81, 29);
			panelViewBooks.add(btnSearch);
			
			JButton btnAddBasket = new JButton("Add to basket");
			btnAddBasket.addActionListener(new ActionListener() {
				/**
				 * Adds the selected books to the users basket
				 */
				public void actionPerformed(ActionEvent e) {
					// Add all selected rows to the customers basket
					for (int index : tableBooks.getSelectedRows()) {
						Book newBook = tableBooks.getBookAt(index);

						if (customer.basketContains(newBook.getISBN())) {
							updateLog(String.format("Error: book with ISBN \"%d\" is already in your basket.", newBook.getISBN()));
							continue;
						}
						else if (user.getBookByISBN(newBook.getISBN()).getQuantity() <= 0){
							updateLog(String.format("Error: book with ISBN \"%d\" is not currently in available.", newBook.getISBN()));
							continue;
						}
						customer.addItemToBasket(newBook);
						updateLog(String.format("\"%s\" added to your basket.", newBook.getTitle()));
					}
					tableBooks.clearSelection();
					
					// Update basket on basket tab
					updateBasketTable(tableBasket, customer);
					// Update summary
					lblTotalPrice.setText(String.format("Total price: £%.2f", customer.getBasketTotal()));
					lblTotalBooks.setText(String.format("Books in basket: %d", customer.getBasket().size()));
				}
			});
			btnAddBasket.setBounds(572, 13, 134, 29);
			panelViewBooks.add(btnAddBasket);
			
			JPanel panelAdvSearch = new JPanel();
			panelAdvSearch.setBorder(new TitledBorder(null, "Advanced Search", TitledBorder.LEADING, TitledBorder.TOP));
			panelAdvSearch.setBounds(19, 66, 673, 164);
			panelViewBooks.add(panelAdvSearch);
			panelAdvSearch.setLayout(null);
			panelAdvSearch.setVisible(false);
			
			String [] advVariableLabels = {"number of pages", "number of pages", "length"};
			int [] advMinVariables = {0, 0, 0};
			int [] advMinTickSpacing =  {25, 25, 1};
			int [] advMaxTickSpacing =  {100, 100, 5};
			int [] advMaxVariables = {1000, 1000, 20};
			
			JLabel lblAdvGenre = new JLabel("Genre");
			lblAdvGenre.setBounds(6, 16, 48, 14);
			panelAdvSearch.add(lblAdvGenre);
			
			JLabel lblAdvType = new JLabel("Type");
			lblAdvType.setBounds(6, 86, 48, 14);
			panelAdvSearch.add(lblAdvType);
			
			JLabel lblAdvMinVariable = new JLabel("Min " + advVariableLabels[0]);
			lblAdvMinVariable.setBounds(141, 16, 122, 14);
			panelAdvSearch.add(lblAdvMinVariable);
			lblAdvMinVariable.setVisible(false);
			
			JLabel lblAdvMaxVariable = new JLabel("Max " + advVariableLabels[0]);
			lblAdvMaxVariable.setBounds(141, 86, 122, 14);
			panelAdvSearch.add(lblAdvMaxVariable);
			lblAdvMaxVariable.setVisible(false);
			
			JComboBox<Object> comboBoxAdvType = new JComboBox<Object>(advBookTypes);
			comboBoxAdvType.addActionListener(new ActionListener() {
				/**
				 * Makes the sliders visible only if a type has been selected
				 * shows the correct values and titles on the sliders
				 */
				public void actionPerformed(ActionEvent e) {
					// Remove all sliders
					Component[] componentList = panelAdvSearch.getComponents();
					for(Component component: componentList) {
						if(component instanceof JSlider) {
							panelAdvSearch.remove(component);
						}
					}
					// If "any" is not selected
					if(comboBoxAdvType.getSelectedIndex() > 0) {
						int index = comboBoxAdvType.getSelectedIndex() - 1;
						// Sliders have to be recreated so the tick labels update
						
						// Update min slider
						lblAdvMinVariable.setText("Min " + advVariableLabels[index]);
						lblAdvMinVariable.setVisible(true);
						
						JSlider sliderMinVariable = new JSlider(JSlider.HORIZONTAL, advMinVariables[index], advMaxVariables[index], 0);
						sliderMinVariable.setSnapToTicks(true);
						sliderMinVariable.setPaintLabels(true);
						sliderMinVariable.setPaintTicks(true);
						sliderMinVariable.setBorder(new LineBorder(Color.LIGHT_GRAY));
						sliderMinVariable.setMajorTickSpacing(advMaxTickSpacing[index]);
						sliderMinVariable.setMinorTickSpacing(advMinTickSpacing[index]);
						sliderMinVariable.setBounds(141, 38, 383, 47);
						panelAdvSearch.add(sliderMinVariable);
						
						// Update max slider
						lblAdvMaxVariable.setText("Max " + advVariableLabels[index]);
						lblAdvMaxVariable.setVisible(true);
						
						JSlider sliderMaxVariable = new JSlider(JSlider.HORIZONTAL, advMinVariables[index], advMaxVariables[index], advMaxVariables[index]);
						sliderMaxVariable.setSnapToTicks(true);
						sliderMaxVariable.setPaintTicks(true);
						sliderMaxVariable.setPaintLabels(true);
						sliderMaxVariable.setMajorTickSpacing(advMaxTickSpacing[index]);
						sliderMaxVariable.setMinorTickSpacing(advMinTickSpacing[index]);
						sliderMaxVariable.setBorder(new LineBorder(Color.LIGHT_GRAY));
						sliderMaxVariable.setBounds(141, 108, 383, 45);
						panelAdvSearch.add(sliderMaxVariable);
					}
					else {
						lblAdvMinVariable.setVisible(false);
						lblAdvMaxVariable.setVisible(false);
					}
					// Update GUI, necessary to get rid of visual bugs
					repaint();
				}
			});
			comboBoxAdvType.setBounds(6, 108, 113, 22);
			panelAdvSearch.add(comboBoxAdvType);
			
			JComboBox<Object> comboBoxAdvGenre = new JComboBox<Object>(advGenres);
			comboBoxAdvGenre.setBounds(6, 38, 113, 22);
			panelAdvSearch.add(comboBoxAdvGenre);
			
			JButton btnAdvSearch = new JButton("Search");
			btnAdvSearch.addActionListener(new ActionListener() {
				/**
				 * Gets the books that meet the multiple search criterias and displays them in the output table
				 */
				public void actionPerformed(ActionEvent e) {
					// Search for books
					String searchTerm = textSearch.getText();
					
					// Update table
					tableModel.setRowCount(0);
					// Get all sliders
					ArrayList<JSlider> sliders = new ArrayList<JSlider>();
					Component[] componentList = panelAdvSearch.getComponents();
					for(Component component: componentList) {
						if(component instanceof JSlider) {
							sliders.add((JSlider) component);
						}
					}
					// Get terms and add each one to the table
					if(sliders.size() > 1) {
						// If sliders are active
						ArrayList<Book> searchResults = customer.advSearch(searchTerm, comboBoxAdvGenre.getSelectedItem().toString(), 
								comboBoxAdvType.getSelectedItem().toString(), sliders.get(0).getValue(), sliders.get(1).getValue());
						for(Book book : searchResults) {
							tableModel.insertRow(0, book.toString().split(", "));
						}
						// If no books can be found, output relevant error message
						if(searchResults.size() < 1){
							updateLog("Error: No books could be found matching this criteria.");
						}
					} else {
						ArrayList<Book> searchResults = customer.advSearch(searchTerm, comboBoxAdvGenre.getSelectedItem().toString());
						for(Book book : searchResults) {
							tableModel.insertRow(0, book.toString().split(", "));
						}
						// If no books can be found, output relevant error message
						if(searchResults.size() < 1){
							updateLog("Error: No books could be found matching this criteria.");
						}
					}
					scrollPaneBooksTable.setBounds(10, 53, 696, 351);
					panelAdvSearch.setVisible(false);
					repaint();
				}
			});
			btnAdvSearch.setBounds(561, 123, 102, 31);
			panelAdvSearch.add(btnAdvSearch);
			
			JButton btnAdvSearchMenu = new JButton("...");
			btnAdvSearchMenu.addActionListener(new ActionListener() {
				/**
				 * Displays the advanced search menu
				 */
				public void actionPerformed(ActionEvent e) {
					// Toggle adv search visibility
					if(scrollPaneBooksTable.getBounds().equals(new Rectangle(10,53,696,351))) {
						scrollPaneBooksTable.setBounds(10,253,696,151);
						panelAdvSearch.setVisible(true);
					} else {
						scrollPaneBooksTable.setBounds(10, 53, 696, 351);
						panelAdvSearch.setVisible(false);
					}
					repaint();
				}
			});
			btnAdvSearchMenu.setBounds(542, 13, 20, 29);
			panelViewBooks.add(btnAdvSearchMenu);
			
			// ============ CHECKOUT PANELS ============
			
			JPanel panelCheckoutPayPal = new JPanel();
			tabbedPane.addTab("Paypal Checkout", null, panelCheckoutPayPal, null);
			panelCheckoutPayPal.setLayout(null);
			
			JLabel lblEmail = new JLabel("Email Address");
			lblEmail.setHorizontalAlignment(SwingConstants.CENTER);
			lblEmail.setHorizontalTextPosition(SwingConstants.CENTER);
			lblEmail.setBounds(295, 135, 106, 14);
			panelCheckoutPayPal.add(lblEmail);
			
			textEmail = new JTextField();
			textEmail.setBounds(295, 160, 106, 20);
			panelCheckoutPayPal.add(textEmail);
			textEmail.setColumns(10);
			
			JButton btnBackPayPal = new JButton("Go back");
			btnBackPayPal.addActionListener(new ActionListener() {
				/**
				 * Takes the user back to the basket panel
				 */
				public void actionPerformed(ActionEvent e) {
					// Reset fields and take user back to the basket tab
					textEmail.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.lightGray));
					textEmail.setText("");
					
					tabbedPane.setSelectedComponent(panelBasket);
				}
			});
			btnBackPayPal.setBounds(251, 188, 91, 23);
			panelCheckoutPayPal.add(btnBackPayPal);
			
			JButton btnCheckoutFinalPayPal = new JButton("Checkout");
			btnCheckoutFinalPayPal.addActionListener(new ActionListener() {
				/**
				 * Checks out the books in the users basket (if the input fields are valid) then empties the basket
				 */
				public void actionPerformed(ActionEvent e) {
					// Reset borders
					textEmail.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.lightGray));
					// Checkout with paypal
					// Error handling
					boolean isError = false; 
					final Pattern emailAddressPattern = Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$", Pattern.CASE_INSENSITIVE);
					if(!emailAddressPattern.matcher(textEmail.getText()).matches()) {
						isError = true;
						updateLog("Error: Please enter a valid email.");
						textEmail.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
					}
					
					if(!isError) {
						customer.checkoutBasket("PayPal");
						
						// Update basket on basket tab
						tableBasketModel.setRowCount(0);
						for(Book book : customer.getBasket()) {
							String[] bookSplit = book.toString().split(", ");
							String[] row = {bookSplit[0], bookSplit[2], bookSplit[6], "1"};
							tableBasketModel.insertRow(0, row);
						}
						// Update summary
						lblTotalPrice.setText(String.format("Total price: £%.2f", customer.getBasketTotal()));
						lblTotalBooks.setText(String.format("Books in basket: %d", customer.getBasket().size()));
						// Go back to basket
						updateLog("Basket successfully checked out with PayPal.");
						tabbedPane.setSelectedComponent(panelBasket);
					}
				}
			});
			btnCheckoutFinalPayPal.setBounds(352, 188, 91, 23);
			panelCheckoutPayPal.add(btnCheckoutFinalPayPal);
			
			JPanel panelCheckoutCredit = new JPanel();
			tabbedPane.addTab("Credit Card Checkout", null, panelCheckoutCredit, null);
			panelCheckoutCredit.setLayout(null);
			
			JLabel lblCardPin = new JLabel("Security Code");
			lblCardPin.setHorizontalTextPosition(SwingConstants.CENTER);
			lblCardPin.setHorizontalAlignment(SwingConstants.CENTER);
			lblCardPin.setBounds(290, 189, 113, 14);
			panelCheckoutCredit.add(lblCardPin);
			
			JLabel lblCardNo = new JLabel("Card Number");
			lblCardNo.setHorizontalTextPosition(SwingConstants.CENTER);
			lblCardNo.setHorizontalAlignment(SwingConstants.CENTER);
			lblCardNo.setBounds(290, 133, 113, 14);
			panelCheckoutCredit.add(lblCardNo);
			
			MaskFormatter cardNumberMask = null;
			MaskFormatter cardPinMask = null;
			try {
				cardNumberMask = new MaskFormatter("######");
				cardPinMask = new MaskFormatter("###");
			} catch (ParseException e1) {
				e1.printStackTrace();
			}
			
			JFormattedTextField fTextCardNumber = new JFormattedTextField(cardNumberMask);
			fTextCardNumber.setBounds(290, 158, 113, 20);
			panelCheckoutCredit.add(fTextCardNumber);
			
			JFormattedTextField fTextCardPin = new JFormattedTextField(cardPinMask);
			fTextCardPin.setBounds(290, 214, 113, 20);
			panelCheckoutCredit.add(fTextCardPin);
			
			JButton btnBackCredit = new JButton("Go back");
			btnBackCredit.addActionListener(new ActionListener() {
				/**
				 * Takes the user back to the basket panel
				 */
				public void actionPerformed(ActionEvent e) {
					// Reset fields and take user back to basket tab
					fTextCardNumber.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.lightGray));
					fTextCardPin.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.lightGray));
					fTextCardNumber.setValue("");
					fTextCardPin.setValue("");
					
					tabbedPane.setSelectedComponent(panelBasket);
				}
			});
			btnBackCredit.setBounds(248, 245, 91, 23);
			panelCheckoutCredit.add(btnBackCredit);
			
			JButton btnCheckoutFinalCredit = new JButton("Checkout");
			btnCheckoutFinalCredit.addActionListener(new ActionListener() {
				/**
				 * Checks out the books in the users basket (if the input fields are valid) then empties the basket
				 */
				public void actionPerformed(ActionEvent e) {
					// Reset borders
					fTextCardNumber.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.lightGray));
					fTextCardPin.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.lightGray));
					
					// Checkout with credit card
					// Error handling
					boolean isError = false;
					if(fTextCardNumber.getText().trim().length() != 6) {
						// Card number is invalid
						isError = true;
						updateLog("Error: Please enter a valid card number.");
						fTextCardNumber.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
					}
					if(fTextCardPin.getText().trim().length() != 3) {
						// Card pin is invalid
						isError = true;
						fTextCardPin.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
						updateLog("Error: Please enter a valid card pin.");
					}
					
					if(!isError) {
						customer.checkoutBasket("Credit Card");
						
						// Update basket on basket tab
						tableBasketModel.setRowCount(0);
						for(Book book : customer.getBasket()) {
							String[] bookSplit = book.toString().split(", ");
							String[] row = {bookSplit[0], bookSplit[2], bookSplit[6], "1"};
							tableBasketModel.insertRow(0, row);
						}
						// Update summary
						lblTotalPrice.setText(String.format("Total price: £%.2f", customer.getBasketTotal()));
						lblTotalBooks.setText(String.format("Books in basket: %d", customer.getBasket().size()));
						// Go back to basket
						updateLog("Basket successfully checked out with credit card.");
						tabbedPane.setSelectedComponent(panelBasket);
					}
				}
			});
			btnCheckoutFinalCredit.setBounds(349, 245, 91, 23);
			panelCheckoutCredit.add(btnCheckoutFinalCredit);
			
		// ============ BASKET PANEL ============

			JScrollPane scrollPaneBasketTable = new JScrollPane();
			scrollPaneBasketTable.setBounds(10, 11, 383, 271);
			panelBasket.add(scrollPaneBasketTable);
			
			// Disables user cell editing
			tableBasket.setDefaultEditor(Object.class, null);
			scrollPaneBasketTable.setViewportView(tableBasket);
			tableBasket.getTableHeader().setReorderingAllowed(false);
			
			JButton btnRemoveBasket = new JButton("Remove selected book(s)");
			btnRemoveBasket.addActionListener(new ActionListener() {
				/**
				 * Removes the selected books from the users basket
				 */
				public void actionPerformed(ActionEvent e) {
					// Indexes must be reverse sorted so updated indexes do not cause issues
					int[] indexes = tableBasket.getSelectedRows();
					
					// Remove selected items from basket
					for(int index : indexes) {
						int ISBN = Integer.parseInt(tableBasket.getValueAt(index, 0).toString());
						while(customer.basketContains(ISBN)) {
							customer.removeItemFromBasket(ISBN);
						}
						updateLog(String.format("\"%s\" removed from the basket.", tableBasket.getValueAt(index, 1).toString()));
					}
					
					// Update basket on basket tab
					updateBasketTable(tableBasket, customer);
					// Update summary
					lblTotalPrice.setText(String.format("Total price: £%.2f", customer.getBasketTotal()));
					lblTotalBooks.setText(String.format("Books in basket: %d", customer.getBasket().size()));
				}
			});
			btnRemoveBasket.setBounds(10, 333, 187, 31);
			panelBasket.add(btnRemoveBasket);
			
			JButton btnCancelBasket = new JButton("Remove all books");
			btnCancelBasket.addActionListener(new ActionListener() {
				/**
				 * Remove all the books from the users basket
				 */
				public void actionPerformed(ActionEvent e) {
					// Remove all items from basket
					customer.cancelItems();
					updateLog("Basket cancelled.");
					
					// Update basket on basket tab
					updateBasketTable(tableBasket, customer);
					// Update summary
					lblTotalPrice.setText(String.format("Total price: £%.2f", customer.getBasketTotal()));
					lblTotalBooks.setText(String.format("Books in basket: %d", customer.getBasket().size()));
				}
			});
			btnCancelBasket.setBounds(207, 333, 187, 30);
			panelBasket.add(btnCancelBasket);
			
			JButton btnCheckoutPayPal = new JButton("Checkout with PayPal");
			btnCheckoutPayPal.addActionListener(new ActionListener() {
				/**
				 * Take the user to the checkout with paypal panel
				 */
				public void actionPerformed(ActionEvent e) {
					tabbedPane.setSelectedComponent(panelCheckoutPayPal);
				}
			});
			btnCheckoutPayPal.setBounds(423, 253, 268, 30);
			panelBasket.add(btnCheckoutPayPal);
			
			JButton btnCheckoutCreditCard = new JButton("Checkout with Credit Card");
			btnCheckoutCreditCard.addActionListener(new ActionListener() {
				/**
				 * Take the user to the checkout with credit card panel
				 */
				public void actionPerformed(ActionEvent e) {
					tabbedPane.setSelectedComponent(panelCheckoutCredit);
				}
			});
			btnCheckoutCreditCard.setBounds(423, 294, 268, 30);
			panelBasket.add(btnCheckoutCreditCard);
			
			JButton btnQuantityIncrease = new JButton("Increase Quantity");
			btnQuantityIncrease.addActionListener(new ActionListener() {
				/**
				 * Increase the quantity of the selected books in the basket
				 */
				public void actionPerformed(ActionEvent e) {
					// Increase quantity of selected books in basket
					for(int index : tableBasket.getSelectedRows()) {
						int ISBN = Integer.parseInt(tableBasket.getValueAt(index, 0).toString());
						int tableIndex = tableBasket.indexOf(ISBN);
						Book book = user.getBookByISBN(ISBN);
						int quantityInStock = book.getQuantity();
						int quantityInBasket = Integer.parseInt(tableBasket.getValueAt(tableIndex, 3).toString());
						// If book has enough stock, increase quantity in basket
						if(quantityInBasket < quantityInStock) {
							customer.addItemToBasket(book);
							tableBasket.setValueAt(quantityInBasket+1, tableIndex, 3);
							// Update summary
							lblTotalPrice.setText(String.format("Total price: £%.2f", customer.getBasketTotal()));
							lblTotalBooks.setText(String.format("Books in basket: %d", customer.getBasket().size()));
						}
						else {
							updateLog("Error: You have already added the maximum quantity of this book.");
						}
					}
				}
			});
			btnQuantityIncrease.setBounds(206, 292, 187, 30);
			panelBasket.add(btnQuantityIncrease);
			
			JButton btnQuantityDecrease = new JButton("Decrease Quantity");
			btnQuantityDecrease.addActionListener(new ActionListener() {
				/**
				 * Decrease the quantity of the selected books in the basket
				 */
				public void actionPerformed(ActionEvent e) {
					// Decrease quantity of selected books in basket
					for(int index : tableBasket.getSelectedRows()) {
						int ISBN = Integer.parseInt(tableBasket.getValueAt(index, 0).toString());
						int tableIndex = tableBasket.indexOf(ISBN);
						int quantityInBasket = Integer.parseInt(tableBasket.getValueAt(tableIndex, 3).toString());
						if(quantityInBasket > 1) {
							customer.removeItemFromBasket(ISBN);
							tableBasket.setValueAt(quantityInBasket-1, tableIndex, 3);
							// Update summary
							lblTotalPrice.setText(String.format("Total price: £%.2f", customer.getBasketTotal()));
							lblTotalBooks.setText(String.format("Books in basket: %d", customer.getBasket().size()));
						}
					}
				}
			});
			btnQuantityDecrease.setBounds(10, 292, 187, 30);
			panelBasket.add(btnQuantityDecrease);
			
		// Only show if user is admin
		} else if(user instanceof Admin) {
			Admin admin = (Admin) user;
			
		// ============ ADD BOOK PANEL ============
			NumberFormat numberFormat = NumberFormat.getNumberInstance();
			numberFormat.setGroupingUsed(false); // Stops commas from appearing in number
			
			MaskFormatter numberMask = null;
			try {
				numberMask = new MaskFormatter("########");
			} catch (ParseException e1) {
				e1.printStackTrace();
			}
			
			JPanel panelAddBook = new JPanel();
			tabbedPane.addTab("Add Book", null, panelAddBook, null);
			panelAddBook.setLayout(null);
			
			// Only allow the user to enter an 8 digit number
			JFormattedTextField fTextISBN = new JFormattedTextField(numberMask);
			fTextISBN.setBounds(290, 23, 96, 19);
			panelAddBook.add(fTextISBN);
			fTextISBN.setColumns(8);
			
			JLabel lblISBN = new JLabel("ISBN:");
			lblISBN.setHorizontalAlignment(SwingConstants.RIGHT);
			lblISBN.setBounds(141, 23, 139, 13);
			panelAddBook.add(lblISBN);
			
			textTitle = new JTextField();
			textTitle.setBounds(290, 52, 96, 19);
			panelAddBook.add(textTitle);
			textTitle.setColumns(10);
			
			JLabel lblTitle = new JLabel("Title:");
			lblTitle.setHorizontalAlignment(SwingConstants.RIGHT);
			lblTitle.setBounds(141, 55, 139, 13);
			panelAddBook.add(lblTitle);
			
			// Book languages that can be chosen
			String [] languages = {"English", "French"};
			
			JComboBox<Object> comboBoxLanguage = new JComboBox<Object>(languages);
			comboBoxLanguage.setBounds(290, 110, 96, 21);
			panelAddBook.add(comboBoxLanguage);
			
			JLabel lblLanguage = new JLabel("Language:");
			lblLanguage.setHorizontalAlignment(SwingConstants.RIGHT);
			lblLanguage.setBounds(141, 114, 139, 13);
			panelAddBook.add(lblLanguage);
			
			JComboBox<Object> comboBoxGenre = new JComboBox<Object>(genres);
			comboBoxGenre.setBounds(290, 141, 96, 21);
			panelAddBook.add(comboBoxGenre);
			
			JLabel lblGenre = new JLabel("Genre:");
			lblGenre.setHorizontalAlignment(SwingConstants.RIGHT);
			lblGenre.setBounds(141, 145, 139, 13);
			panelAddBook.add(lblGenre);
			
			// Masks to format date parts
			MaskFormatter dayMonthMask = null, minsHoursMask = null;
			MaskFormatter yearMask = null;
			try {
				dayMonthMask = minsHoursMask = new MaskFormatter("##");
				dayMonthMask.setPlaceholderCharacter('0');
				minsHoursMask.setPlaceholderCharacter('0');
				
				yearMask = new MaskFormatter("####");
				yearMask.setPlaceholderCharacter('0');
			} catch (ParseException e1) {
				e1.printStackTrace();
			}
			
			JFormattedTextField fTextDateDay = new JFormattedTextField(dayMonthMask);
			fTextDateDay.setBounds(290, 232, 26, 19);
			panelAddBook.add(fTextDateDay);
			
			JFormattedTextField fTextDateMonth = new JFormattedTextField(dayMonthMask);
			fTextDateMonth.setBounds(317, 232, 26, 19);
			panelAddBook.add(fTextDateMonth);
			
			JFormattedTextField fTextDateYear = new JFormattedTextField(yearMask);
			fTextDateYear.setBounds(344, 232, 42, 19);
			panelAddBook.add(fTextDateYear);
			
			JLabel lblRelease = new JLabel("Date (dd-MM-yyyy):");
			lblRelease.setHorizontalAlignment(SwingConstants.RIGHT);
			lblRelease.setBounds(146, 235, 139, 13);
			panelAddBook.add(lblRelease);
			
			// Format price to a currency
			NumberFormat priceDisplayFormat = NumberFormat.getCurrencyInstance();
			NumberFormat priceEditFormat = NumberFormat.getNumberInstance();
			JFormattedTextField fTextPrice = new JFormattedTextField(new DefaultFormatterFactory(
	                    new NumberFormatter(priceDisplayFormat),
	                    new NumberFormatter(priceDisplayFormat),
	                    new NumberFormatter(priceEditFormat)));
			fTextPrice.setBounds(290, 81, 96, 19);
			panelAddBook.add(fTextPrice);
			
			JLabel lblPrice = new JLabel("Price:");
			lblPrice.setHorizontalAlignment(SwingConstants.RIGHT);
			lblPrice.setBounds(141, 82, 139, 13);
			panelAddBook.add(lblPrice);
			
			JSpinner spinnerQuantity = new JSpinner();
			spinnerQuantity.setBounds(290, 203, 96, 19);
			panelAddBook.add(spinnerQuantity);
			
			JLabel lblQuantity = new JLabel("Quantity:");
			lblQuantity.setHorizontalAlignment(SwingConstants.RIGHT);
			lblQuantity.setBounds(141, 206, 139, 13);
			panelAddBook.add(lblQuantity);
			
			// Book conditions that can be selected
			String [] bookConditions = {"new", "used"};
			
			JComboBox<Object> comboBoxCondition = new JComboBox<Object>(bookConditions);
			comboBoxCondition.setBounds(290, 288, 96, 21);
			panelAddBook.add(comboBoxCondition);
			
			JLabel lblCondition = new JLabel("Condition:");
			lblCondition.setHorizontalAlignment(SwingConstants.RIGHT);
			lblCondition.setBounds(214, 292, 66, 13);
			panelAddBook.add(lblCondition);
			
			JSpinner spinnerNumOfPages = new JSpinner();
			spinnerNumOfPages.setBounds(290, 318, 96, 20);
			panelAddBook.add(spinnerNumOfPages);
			
			JLabel lblNumOfPages = new JLabel("Number of pages:");
			lblNumOfPages.setHorizontalAlignment(SwingConstants.RIGHT);
			lblNumOfPages.setBounds(184, 321, 96, 13);
			panelAddBook.add(lblNumOfPages);
			
			// Book formats that can be added
			String [] ebookFormats = {"EPUB", "MOBI", "AZW3", "PDF"};
			String [] audiobookFormats = {"MP3", "WAV", "AAC"};
			
			newComboBox comboBoxFormat = new newComboBox(ebookFormats);
			comboBoxFormat.setVisible(false);
			comboBoxFormat.setBounds(290, 288, 96, 21);
			panelAddBook.add(comboBoxFormat);
			
			JLabel lblFormat = new JLabel("Format:");
			lblFormat.setVisible(false);
			lblFormat.setHorizontalAlignment(SwingConstants.RIGHT);
			lblFormat.setBounds(235, 292, 45, 13);
			panelAddBook.add(lblFormat);
			
			JFormattedTextField fTextLengthHours = new JFormattedTextField(minsHoursMask);
			fTextLengthHours.setVisible(false);
			fTextLengthHours.setBounds(311, 319, 26, 19);
			panelAddBook.add(fTextLengthHours);
			
			JFormattedTextField fTextLengthMins = new JFormattedTextField(minsHoursMask);
			fTextLengthMins.setVisible(false);
			fTextLengthMins.setBounds(338, 319, 26, 19);
			panelAddBook.add(fTextLengthMins);
			
			JLabel lblLength = new JLabel("Length (hh-mm):");
			lblLength.setVisible(false);
			lblLength.setHorizontalAlignment(SwingConstants.RIGHT);
			lblLength.setBounds(184, 322, 96, 13);
			panelAddBook.add(lblLength);
			
			JComboBox<Object> comboBoxType = new JComboBox<Object>(bookTypes);
			comboBoxType.setBounds(290, 172, 96, 21);
			panelAddBook.add(comboBoxType);
			
			JButton btnAddBook = new JButton("Add Book");
			btnAddBook.addActionListener(new ActionListener() {
				/**
				 * If all input fields are correct, adds book to the stock file
				 */
				public void actionPerformed(ActionEvent e) {
					// Reset borders
					resetFormBorders(panelAddBook);
					
					LocalDate releaseDate = null;
					
					BookType bookType = BookType.getType(comboBoxType.getSelectedItem().toString());
					textAreaOutput.setText("");
					boolean isError = false;
					// Check fields are filled out
					if(fTextISBN.getText().trim().length() != 8) {
						//ISBN is incorrect
						isError = true;
						updateLog("Error: please enter a valid ISBN number.");
						fTextISBN.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
					} else if(admin.bookExists(Integer.parseInt(fTextISBN.getText()))){
						// Book already exists in stock file
						isError = true;
						updateLog("Error: a book with this ISBN already exists in the stock file.");
						fTextISBN.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
					}
					if(textTitle.getText().trim().length() == 0) {
						// Title is empty
						isError = true;
						updateLog("Error: please enter a valid title.");
						textTitle.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
					}
					try {
						releaseDate = LocalDate.of(Integer.parseInt(fTextDateYear.getText()), (Integer.parseInt(fTextDateMonth.getText()))
								, (Integer.parseInt(fTextDateDay.getText())));
					} catch (Exception dateException) {
						isError = true;
						updateLog("Error: please enter a valid release date.");
						fTextDateDay.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
						fTextDateMonth.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
						fTextDateYear.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
					}
					if(fTextPrice.getText().length() == 0 || fTextPrice.getText().toString().contains("-") || Double.parseDouble(fTextPrice.getText().toString().substring(1, fTextPrice.getText().length())) <= 0) {
						// Price is incorrect
						isError = true;
						updateLog("Error: please enter a valid price.");
						fTextPrice.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
					}
					if((Integer) spinnerQuantity.getValue() <= 0) {
						// Quantity is incorrect
						isError = true;
						updateLog("Error: please enter a valid quantity.");
						spinnerQuantity.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
					}
					if((bookType == BookType.PAPERBACK || bookType == BookType.EBOOK) && (Integer) spinnerNumOfPages.getValue() <= 0) {
						// Number of pages is incorrect
						isError = true;
						updateLog("Error: please enter a valid number of pages.");
						spinnerNumOfPages.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
					}
					if(bookType == BookType.AUDIOBOOK && (fTextLengthHours.getText().equals("00") && fTextLengthMins.getText().equals("00"))
							|| Integer.parseInt(fTextLengthMins.getText())>59) {
						// Length is incorrect
						isError = true;
						updateLog("Error: please enter a valid length.");
						fTextLengthHours.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
						fTextLengthMins.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
					}
					
					if(!isError) {
						int isbn = Integer.parseInt(fTextISBN.getText());
				        String title = textTitle.getText();
				        String language = comboBoxLanguage.getSelectedItem().toString();
				        String genre = comboBoxGenre.getSelectedItem().toString();
				        double price = Double.parseDouble(fTextPrice.getText().toString().substring(1, fTextPrice.getText().length()));
				        int quantity = Integer.parseInt(spinnerQuantity.getValue().toString());
						
						boolean bookAdded = false;
						
						// If all of the required fields have been filled out correctly, add book to system
						if(bookType == BookType.PAPERBACK) {
							Paperback newBook = new Paperback(isbn, title, language, genre, releaseDate, price, quantity, 
									Integer.parseInt(spinnerNumOfPages.getValue().toString()), comboBoxCondition.getSelectedItem().toString());
							admin.addBook(newBook);
							bookAdded = true;
						}
						else if(bookType == BookType.EBOOK) {
							Ebook newBook = new Ebook(isbn, title, language, genre, releaseDate, price, quantity,
									Integer.parseInt(spinnerNumOfPages.getValue().toString()), comboBoxFormat.getSelectedItem().toString());
							admin.addBook(newBook);
							bookAdded = true;
						}
						else if(bookType == BookType.AUDIOBOOK) {
							Audiobook newBook = new Audiobook(isbn, title, language, genre, releaseDate, price, quantity, 
									Double.parseDouble(fTextLengthHours.getValue().toString())+Double.parseDouble(fTextLengthMins.getValue().toString())/100, 
									comboBoxFormat.getSelectedItem().toString());
							admin.addBook(newBook);
							bookAdded = true;
						}
						// If book was added successfully, show success in output
						if(bookAdded) {
							updateLog(String.format("%s added to the stock file.", textTitle.getText()));
							clearForm(panelAddBook);
						}
						else {
							updateLog(String.format("Error: %s could not be added to the stock file.", textTitle.getText()));
						}
					}
				}
			});
			btnAddBook.setBounds(341, 363, 125, 42);
			panelAddBook.add(btnAddBook);
			
			JLabel lblType = new JLabel("Type:");
			lblType.setHorizontalAlignment(SwingConstants.RIGHT);
			lblType.setBounds(141, 175, 139, 13);
			panelAddBook.add(lblType);
			
			JButton btnClear = new JButton("Clear ");
			btnClear.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					clearForm(panelAddBook);
				}
			});
			btnClear.setBounds(205, 363, 125, 42);
			panelAddBook.add(btnClear);
			
			
			// When user has selected a book type
			comboBoxType.addActionListener (new ActionListener () {
				/**
				 * Sets only the required fields to visible for the books extra info (num of pages, length, etc..)
				 */
			    public void actionPerformed(ActionEvent e) {
			    	// Re-enable all fields
			    	lblCondition.setVisible(true);
			    	lblNumOfPages.setVisible(true);
			    	lblFormat.setVisible(true);
			    	lblLength.setVisible(true);
			    	comboBoxCondition.setVisible(true);
		    		spinnerNumOfPages.setVisible(true);
			    	comboBoxFormat.setVisible(true);
			    	fTextLengthHours.setVisible(true);
			    	fTextLengthMins.setVisible(true);
			    	
			    	int choice = comboBoxType.getSelectedIndex();
			    	// Disable fields that are not needed based on users choice
			    	switch(choice) {
			    		// Paperback
				    	case 0:
					    	lblFormat.setVisible(false);
					    	lblLength.setVisible(false);
				    		fTextLengthHours.setVisible(false);
					    	fTextLengthMins.setVisible(false);
				    		comboBoxFormat.setVisible(false);
				    		break;
			    		// EBook
				    	case 1:
				    		lblCondition.setVisible(false);
					    	lblLength.setVisible(false);
				    		comboBoxCondition.setVisible(false);
				    		fTextLengthHours.setVisible(false);
					    	fTextLengthMins.setVisible(false);
				    		comboBoxFormat.removeAllItems();
				    		comboBoxFormat.addList(ebookFormats);
				    		break;
			    		// Audiobook
				    	case 2:
				    		lblCondition.setVisible(false);
					    	lblNumOfPages.setVisible(false);
				    		comboBoxCondition.setVisible(false);
				    		spinnerNumOfPages.setVisible(false);
				    		comboBoxFormat.removeAllItems();
				    		comboBoxFormat.addList(audiobookFormats);
				    		break;
			    	}
			    }
			});
		}
	}
}

